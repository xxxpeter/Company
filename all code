//先做src中的model

org.model
member.java


package org.model;

public class member {
	private Integer id;
	private String name;
	private String password;
	
	public member()
	{
		
	}
	
	public member(String name,String password)
	{
//		if(name==null || name.trim().equals("")) {
//			System.out.println("名子不能空白");
//			throw new RuntimeException("名子失敗");
//		}else {
			this.name=name;
//		}
		
//		if(password==null || password.trim().equals("")) {
//			System.out.println("密碼不能空白");
//			throw new RuntimeException("密碼失敗");
//		}else {
			this.password=password;
//		}
	}
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	
	

}









org.model
porder.java


package org.model;

public class porder {
	private Integer id;
	private String name;
	private String product;
	private Integer amount;
	private Integer sum;
	
	private String date;

	public porder()
	{
		
	}
	
	public porder(String name,String product,int amount)
	{
		
		this.name=name;
		this.product=product;
		this.amount=amount;
		
		//如果產品是A，價格1500元
		if(this.product.equals("A")) sum=amount*1500;
		if(this.product.equals("B")) sum=amount*2000;
		if(this.product.equals("C")) sum=amount*2500;
		
	}
	
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getProduct() {
		return product;
	}
	public void setProduct(String product) {
		this.product = product;
	}
	public Integer getAmount() {
		return amount;
	}
	public void setAmount(Integer amount) {
		this.amount = amount;
	}
	public Integer getSum() {
		return sum;
	}
	public void setSum(Integer sum) {
		this.sum = sum;
	}
	
	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
	}
	
	

}










org.model
member.hbm.xml


<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 2019/6/3 ?U?? 08:39:18 by Hibernate Tools 3.4.0.CR1 -->
<hibernate-mapping>
    <class name="org.model.member" table="MEMBER" catalog="company">
        <id name="id" type="java.lang.Integer">
            <column name="ID" />
            <generator class="native" />
        </id>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
        <property name="password" type="java.lang.String">
            <column name="PASSWORD" />
        </property>
    </class>
</hibernate-mapping>









org.model
porder.hbm.xml


<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 2019/6/3 ?U?? 08:39:28 by Hibernate Tools 3.4.0.CR1 -->
<hibernate-mapping>
    <class name="org.model.porder" table="PORDER" catalog="company">
        <id name="id" type="java.lang.Integer">
            <column name="ID" />
            <generator class="native" />
        </id>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
        <property name="product" type="java.lang.String">
            <column name="PRODUCT" />
        </property>
        <property name="amount" type="java.lang.Integer">
            <column name="AMOUNT" />
        </property>
        <property name="sum" type="java.lang.Integer">
            <column name="SUM" />
        </property>
        <property name="date" type="java.lang.String">
            <column name="DATE" />
        </property>
    </class>
</hibernate-mapping>









hibernate.cfg.xml


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
                                         "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
 <session-factory name="">
  <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
  <property name="hibernate.connection.password">1234</property>
  <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/company?useUnicode=true&amp;characterEncoding=UTF-8</property>
  <property name="hibernate.connection.username">root</property>
  <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
  <mapping resource="org/model/member.hbm.xml"/>
  <mapping resource="org/model/porder.hbm.xml"/>
 </session-factory>
</hibernate-configuration>









//完成與資料庫連線

org.DBConn
DBConn.java


package org.DBConn;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class DBConn {
	
	//與資料庫連線
	public static Session getSession()
	{
		Configuration c=new Configuration().configure();
		SessionFactory sf=c.buildSessionFactory();
		
		Session se=sf.openSession();
		
		return se;
		
	}

	public static void main(String[] args) {
		System.out.println(DBConn.getSession());

	}

}









//做方法

org.DAO
memberDAO.java


package org.DAO;

import java.util.Iterator;
import java.util.List;

import org.DBConn.DBConn;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.model.member;
import org.model.porder;

public class memberDAO {
	//註冊會員
	public static void add(member m)
	{
		Session se=DBConn.getSession();
		
		Transaction tx=se.beginTransaction();
		
		se.save(m);
		
		tx.commit();
	}
	
	//檢查資料庫是否有此帳號密碼
	public static boolean checkId(String name,String password)
	{
		Session se=DBConn.getSession();
		
		String sql="select * from member where name='"+name+"' and password='"+password+"'";
		SQLQuery q=se.createSQLQuery(sql);
		
		q.addEntity("m", member.class);
		List li=q.list();
		
		boolean b;
		
		
		if(li.size()!=0)
		{
			b=true;
			
			
		}
		else
		{
			b=false;
		}
		
		
		return b;
		
		
	}
	
	//檢查是否有人已使用過該帳號
	public static boolean checkId(String name)
	{
		Session se=DBConn.getSession();
		
		String sql="select * from member where name='"+name+"'";
		SQLQuery q=se.createSQLQuery(sql);
		
		q.addEntity("m", member.class);
		List li=q.list();
		
		boolean b;
		
		
		if(li.size()!=0)
		{
			b=true;
			
			
		}
		else
		{
			b=false;
		}
		
		
		return b;
		
		
	}
	
	
	//查詢所有的帳號
	public static List queryAllPassword(){
		String sql="select * from member";
		Session s=DBConn.getSession();
		SQLQuery sq=s.createSQLQuery(sql);
		sq.addEntity("M",member.class);
		List l=sq.list();
		return l;
	}
	
	//更新指定id會員密碼
	public static void updateMemberPassword(int id,String password) {
		Session se = DBConn.getSession();
		
		member m = (member)se.get(member.class, new Integer(id));
		
		m.setPassword(password);
		
		Transaction tx = null;
		
		try {
			
			tx = se.beginTransaction();
			
			se.update(m);
			
			tx.commit();
			
		} catch(Exception e) {
			
			if( tx != null)
				tx.rollback();
			e.printStackTrace();
			
		} finally {
			se.close();
		}
	}
	
	//刪除指定id帳號
	public static void deleteMemberPassword(int id) {
		Session s=DBConn.getSession();
		member m=(member)s.get(member.class,new Integer(id));
		Transaction tx = null;
		
		try {
			
			tx = s.beginTransaction();
			
			s.delete(m);
			
			tx.commit();
			
		} catch(Exception e) {
			
			if( tx != null)
				tx.rollback();
			e.printStackTrace();
			
		} finally {
			s.close();
		}
	}
	
	//檢查字串中是否有空格
	public static boolean checkNameSpace(String s) {
//		System.out.println(s);
		
		//將字串首尾空格去掉
		s=s.trim();

//		System.out.println(s);
		
		boolean b = true;
		
		//對每個字元檢查是否有空格，一有空格則回傳true
		for(int i=0;i<s.length();i++) {
			String string=s.charAt(i)+"";
			if(string.equals(" ")) {
//				System.out.println("index = "+i+" 有空格");
				b=true;
				break;
			}else {
				b=false;
			}
		}
		return b;
	}

	public static void main(String[] args){
		
		/*	
		member m=new member();
		m.setName("allen");
		m.setPassword("1234");
		
		memberDAO.add(m);
		*/
		
//		System.out.println(memberDAO.checkId("abcw"));
		
//		查詢客戶訂單
//		memberDAO.queryMemberOrder("b");
		
//		memberDAO.add(new member("aa"," "));
	}

}
